#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vueexpress:server');
var http = require('http');
const dotenv = require('dotenv');
const winston = require('../config/winston');
const isReachable = require('is-reachable');
dotenv.config();
/**
 * Get port from environment and index in Express.
 */

var port = normalizePort(process.env.NODE_PORT || '32770');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log(`server running on port ${port}`);
server.on('error', onError);
server.on('listening', onListening);

/**
 *  Socket IO for real time communication with the client
 */
var socketApi = require('../sockets/socketApi');
var io = socketApi.io;


/**
 * Check for connectivity to the PLC IP Address
 * Function checkConnection returns a boolean
 */
const machineIp = process.env.NODE_MACHINE_IP;
// const checkConnection = async () => {
//   return await isReachable(machineIp)
// };

const checkConnection = setInterval(async () => {
  let isConnected = await isReachable(machineIp);
  checkConnCb(isConnected)
}, 3000);

var connectionStatus = false;

const checkConnCb = (isConnected) => {
    if (connectionStatus && isConnected){

    }
    else if (!connectionStatus && isConnected) {
      io.attach(server);
      connectionStatus = true;
      winston.info("Reattaching socket_IO() to server");
    } else if (connectionStatus && !isConnected) {
      io.close();
      winston.info("You lost connection to the PLC network so the socket is closing")
      connectionStatus = false;
    } else {

    }
};



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on' + bind);
  debug('Listening on ' + bind);
}
